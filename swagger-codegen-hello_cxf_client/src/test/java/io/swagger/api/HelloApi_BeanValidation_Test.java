/**
 * Sample REST Application
 * The Application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.api;

import static org.junit.Assert.*;

import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.ws.rs.ProcessingException;

import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.wsdl.interceptors.BareOutInterceptor;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.sun.istack.internal.NotNull;

import io.swagger.api.util.BeanValidationException;
import io.swagger.api.util.ClientBeanValidationDebugOutInterceptor;
import io.swagger.model.HelloModel;




/**
 * API tests for HelloApi
 */
public class HelloApi_BeanValidation_Test {


    private HelloApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8080/services", HelloApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client); 

        config.getOutInterceptors().add(new ClientBeanValidationDebugOutInterceptor());
    }

    @Test
    public void sayHelloWithModelTest() {
        String name = null;
        String firstName = null;

        HelloModel request = new HelloModel();
        request.setName(name);
        request.setFirstName(firstName);

        try {
            api.helloRequest(name, request);
            fail("BeanValidationException should be thrown");
        } catch (ProcessingException e) {
            BeanValidationException cause = (BeanValidationException) e.getCause();
            Set<ConstraintViolation<Object>> violations = cause.getViolations();

            assertEquals(new Integer(1), new Integer(violations.size()));

            Iterator<ConstraintViolation<Object>> it = violations.iterator();
            Class<? extends Annotation> constraintType = it.next()
                    .getConstraintDescriptor()
                    .getAnnotation()
                    .annotationType();
            assertEquals(javax.validation.constraints.NotNull.class,
                    constraintType);
        }

    }
    
    @Test
    public void sayHelloTest() {
        String name = null;
        String firstName = null;

        HelloModel request = new HelloModel();
        request.setName(name);
        request.setFirstName(firstName);

        try {
            api.sayHello(name, firstName);
            fail("BeanValidationException should be thrown");
        } catch (ProcessingException e) {
            BeanValidationException cause = (BeanValidationException) e.getCause();

            Set<ConstraintViolation<Object>> violations = cause.getViolations();

            assertEquals(new Integer(2), new Integer(violations.size()));

            Iterator<ConstraintViolation<Object>> it = violations.iterator();
            Class<? extends Annotation> constraintType = it.next().getConstraintDescriptor().getAnnotation()
                    .annotationType();
            assertEquals(javax.validation.constraints.NotNull.class, constraintType);

            constraintType = it.next().getConstraintDescriptor().getAnnotation().annotationType();
            assertEquals(javax.validation.constraints.NotNull.class, constraintType);
        }

    }

}
